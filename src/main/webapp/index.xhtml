<?xml version='1.0' encoding='UTF-8' ?>
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:p="http://primefaces.org/ui"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets">
<h:head>
	<link rel="stylesheet" type="text/css" media="screen" href="style.css" />
	<link rel="stylesheet"
		href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
	<title>Ghost Net Fishing</title>
	<link rel="icon" type="image/png" href="favicon-16x16.png" />
	<link rel="stylesheet"
		href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
		integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
		crossorigin="" />
	<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
		integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
		crossorigin=""></script>

</h:head>

<style>
.ui-panelgrid.showcase-text-align-center .ui-grid-responsive .ui-panelgrid-cell
	{
	text-align: center;
}

.customPanelGrid .ui-panelgrid-content {
	align-items: center;
}
</style>

<h:body class="orangeBackground">

	<!-- Wrapper, um den Inhalt der Webseite zu verpacken -->
	<div class="wrapper">

		<ui:insert name="header">
			<ui:include src="header.xhtml" />
		</ui:insert>

		<!-- Container für den Inhalt zwischen Header und Footer -->
		<div class="content">
			<img class="headerImage" src="headerImage.jpg" alt="Image" />

			<h1>Ghost Net Fishing</h1>

			<h3>Die Plattform für die Verwaltung von Geisternetzen</h3>


			<div class="containerTable">
				<h:form id="form">

					<div class="containerDataTableMenu">
						<p:panelGrid columns="4" layout="grid"
							styleClass="customPanelGrid" contentStyleClass="ui-fluid"
							style="margin-bottom:20px;">
							<p:commandButton value="Neue Meldung" icon="pi pi-plus"
								styleClass="btn btn-primary" action="report.xhtml"
								style="background-color: var(--primary-color); border-color: var(--primary-color); color: white;" />

							<h:outputLabel for="statusFilter" value="Status:" />
							<p:inputText id="statusFilter" placeholder="Filter nach Status"
								p:keyup="@this" update="ghostnetsDataTable" />

							<p:commandButton icon="fa-solid fa-earth-americas"
								title="Karte anzeigen"
								onclick="PF('dlg').show(); loadGhostNetMarkers();"
								styleClass="btn btn-secondary"
								style="background-color: var(--primary-color); border-color: var(--primary-color); color: white;" />

						</p:panelGrid>
					</div>


					<!-- Tabelle aus der Primefaces-Bibkothek, um alle Geisternetze tabellarisch aufzulisten -->
					<p:dataTable id="ghostnetsDataTable"
						value="#{dtContextMenuView.ghostnets}" var="ghostnet"
						rowKey="#{ghostnet.nr}"
						selection="#{dtContextMenuView.selectedGhostNet}"
						selectionMode="single">

						<!-- jede einzelne Spalte der Tabelle wird einmal aufgelistet, die Zeilen werden automatisch durch JSF generiert anhand der Liste in dem value-Attribute -->
						<p:column headerText="ID">
							<h:outputText value="#{ghostnet.nr}" />
						</p:column>
						<p:column headerText="Längengrad">
							<h:outputText value="#{ghostnet.longitude}" />
						</p:column>
						<p:column headerText="Breitengrad">
							<h:outputText value="#{ghostnet.latitude}" />
						</p:column>

						<p:column headerText="geschätzte Größe [m²]">
							<h:outputText value="#{ghostnet.estimatedSize}" />
						</p:column>
						<p:column styleClass="statusColumn" headerText="Status">
							<h:outputText value="#{ghostnet.status}"
								styleClass="#{ghostnet.status} status" />
						</p:column>
						<p:column headerText="Zeitpunkt Erfassung">
							<h:outputText value="#{ghostnet.recordingDate}">
								<f:convertDateTime type="date" dateStyle="medium" />
							</h:outputText>
						</p:column>
						<p:column rendered="#{loginController.loggedInUser != null}" headerText="Bergende Person">
							<p:commandLink update=":form:userDetail"
								oncomplete="PF('userDialog').show();"
								value="#{ghostnet.savingPerson.surname} #{ghostnet.savingPerson.name}">
								<f:setPropertyActionListener value="#{ghostnet}"
									target="#{dtContextMenuView.selectedGhostNet}" />
							</p:commandLink>
						</p:column>
					</p:dataTable>

					<!-- Kontextmenü, womit der Status eines Geisternetzes verändert werden kann, wenn der Nutzer eingeloggt ist -->
					<p:contextMenu for="ghostnetsDataTable" widgetVar="contextMenu"
						rendered="#{loginController.loggedInUser != null}"
						id="contextMenu">
						<p:menuitem value="Bergen"
							actionListener="#{dtContextMenuView.setGhostNetStatus('Bergung bevorstehend')}"
							update="ghostnetsDataTable" />
						<p:menuitem value="Geborgen melden"
							actionListener="#{dtContextMenuView.setGhostNetStatus('Geborgen')}"
							update="ghostnetsDataTable" />
						<p:menuitem value="Verschollen melden"
							actionListener="#{dtContextMenuView.setGhostNetStatus('Verschollen')}"
							update="ghostnetsDataTable" />
					</p:contextMenu>

					<!-- Kontextmenü, womit der Status eines Geisternetzes verändert werden kann, wenn der Nutzer nicht eingeloggt ist -->
					<p:contextMenu for="ghostnetsDataTable"
						widgetVar="contextMenuNotLoggedIn"
						rendered="#{loginController.loggedInUser == null}"
						id="contextMenuNotLoggedIn">
						<p:menuitem value="Verschollen melden"
							actionListener="#{dtContextMenuView.setGhostNetStatus('Verschollen')}"
							update="ghostnetsDataTable" />
					</p:contextMenu>

					<!-- Pop-Dialog für das Anzeigen von Benutzerdetails wie z.B. die Telefonnummer -->
					<p:dialog header="Benutzerdetails" widgetVar="userDialog"
						modal="true" closable="true" resizable="false" width="400">
						<h:panelGrid id="userDetail" columns="2" cellpadding="5"
							styleClass="tablePopup">
							<h:outputLabel value="E-Mail:" />
							<h:outputText
								value="#{dtContextMenuView.selectedGhostNet.savingPerson.username}" />
							<h:outputLabel value="Vorname:" />
							<h:outputText
								value="#{dtContextMenuView.selectedGhostNet.savingPerson.surname}" />
							<h:outputLabel value="Nachname:" />
							<h:outputText
								value="#{dtContextMenuView.selectedGhostNet.savingPerson.name}" />
							<h:outputLabel value="Telefonnummer:" />
							<h:outputText
								value="#{dtContextMenuView.selectedGhostNet.savingPerson.phoneNumber}" />

						</h:panelGrid>

					</p:dialog>

					<!-- Popup-Dialog für das Anzeigen einer Karte -->
					<p:dialog header="Karte" widgetVar="dlg" modal="true"
						resizable="false" width="800px" height="500px">
						<h:panelGroup id="mapDialog">
							<div id="map" style="height: 450px; width: 100%;"></div>
						</h:panelGroup>
					</p:dialog>
				</h:form>


				<p:dialog header="Fehlermeldung" widgetVar="ErrorDialogStatus"
					minHeight="40" width="300" showEffect="fade" modal="true"
					closeOnEscape="true">
					<p class="m-0">Die Statusänderung ist nicht möglich. Wählen Sie
						bitte einen anderen Status aus.</p>
				</p:dialog>


			</div>

		</div>

		<!-- Einfügen des Footers, welcher in einer anderen Komponente für die Wiederverwendung erstellt wird -->
		<ui:insert name="footer">
			<ui:include src="footer.xhtml" />
		</ui:insert>

	</div>

	<script>
		var map = L.map('map').setView([ 0, 0 ], 1);

		L
				.tileLayer(
						'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
						{
							attribution : '<a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
						}).addTo(map);

		// Funktion zum Hinzufügen der Geisternetz-Markierungen
		function loadGhostNetMarkers() {
			
			var ghostnets = [
                <ui:repeat value="#{dtContextMenuView.ghostnets}" var="ghostnet">
                	<ui:fragment rendered="#{ghostnet.status == 'Gemeldet'}">
                		{lat: #{ghostnet.latitude}, lng: #{ghostnet.longitude}},
            		</ui:fragment>
                </ui:repeat>
            ];
			
			ghostnets.forEach(function(ghostnet) {
				// Füge einen Kreis für jedes Geisternetz hinzu
				L.circle([ ghostnet.lat, ghostnet.lng ], {
					color : 'red',
					fillColor : '#f03',
					fillOpacity : 0.5
				}).addTo(map);
				
			});
		}
	</script>

</h:body>

</html>